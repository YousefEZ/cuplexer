// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.lex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\0\5\31"+
    "\1\32\15\31\1\33\6\31\1\34\1\35\1\36\1\37"+
    "\1\40\1\0\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\31\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\3\31\1\67\1\70\1\71\54\0\1\72\12\0"+
    "\1\72\4\0\1\72\5\0\27\72\1\0\37\72\1\0"+
    "\u01ca\72\4\0\14\72\16\0\5\72\7\0\1\72\1\0"+
    "\1\72\21\0\165\72\1\0\2\72\2\0\4\72\1\0"+
    "\1\72\6\0\1\72\1\0\3\72\1\0\1\72\1\0"+
    "\24\72\1\0\123\72\1\0\213\72\1\0\255\72\1\0"+
    "\46\72\2\0\1\72\6\0\51\72\10\0\55\72\1\0"+
    "\1\72\1\0\2\72\1\0\2\72\1\0\1\72\10\0"+
    "\33\72\4\0\4\72\35\0\13\72\5\0\112\72\4\0"+
    "\146\72\1\0\10\72\2\0\12\72\1\0\23\72\2\0"+
    "\1\72\20\0\73\72\2\0\145\72\16\0\66\72\4\0"+
    "\1\72\2\0\1\72\2\0\56\72\22\0\34\72\4\0"+
    "\13\72\65\0\25\72\1\0\10\72\25\0\17\72\1\0"+
    "\201\72\2\0\12\72\1\0\23\72\1\0\10\72\2\0"+
    "\2\72\2\0\26\72\1\0\7\72\1\0\1\72\3\0"+
    "\4\72\2\0\11\72\2\0\2\72\2\0\4\72\10\0"+
    "\1\72\4\0\2\72\1\0\5\72\2\0\14\72\12\0"+
    "\1\72\1\0\1\72\2\0\3\72\1\0\6\72\4\0"+
    "\2\72\2\0\26\72\1\0\7\72\1\0\2\72\1\0"+
    "\2\72\1\0\2\72\2\0\1\72\1\0\5\72\4\0"+
    "\2\72\2\0\3\72\3\0\1\72\7\0\4\72\1\0"+
    "\1\72\7\0\20\72\13\0\3\72\1\0\11\72\1\0"+
    "\3\72\1\0\26\72\1\0\7\72\1\0\2\72\1\0"+
    "\5\72\2\0\12\72\1\0\3\72\1\0\3\72\2\0"+
    "\1\72\17\0\4\72\2\0\12\72\11\0\7\72\1\0"+
    "\3\72\1\0\10\72\2\0\2\72\2\0\26\72\1\0"+
    "\7\72\1\0\2\72\1\0\5\72\2\0\11\72\2\0"+
    "\2\72\2\0\3\72\10\0\2\72\4\0\2\72\1\0"+
    "\5\72\2\0\12\72\1\0\1\72\20\0\2\72\1\0"+
    "\6\72\3\0\3\72\1\0\4\72\3\0\2\72\1\0"+
    "\1\72\1\0\2\72\3\0\2\72\3\0\3\72\3\0"+
    "\14\72\4\0\5\72\3\0\3\72\1\0\4\72\2\0"+
    "\1\72\6\0\1\72\16\0\12\72\20\0\15\72\1\0"+
    "\3\72\1\0\27\72\1\0\20\72\3\0\10\72\1\0"+
    "\3\72\1\0\4\72\7\0\2\72\1\0\3\72\5\0"+
    "\4\72\2\0\12\72\20\0\4\72\1\0\10\72\1\0"+
    "\3\72\1\0\27\72\1\0\12\72\1\0\5\72\2\0"+
    "\11\72\1\0\3\72\1\0\4\72\7\0\2\72\7\0"+
    "\1\72\1\0\4\72\2\0\12\72\1\0\2\72\15\0"+
    "\4\72\1\0\10\72\1\0\3\72\1\0\63\72\1\0"+
    "\3\72\1\0\5\72\5\0\4\72\7\0\5\72\2\0"+
    "\12\72\12\0\6\72\2\0\2\72\1\0\22\72\3\0"+
    "\30\72\1\0\11\72\1\0\1\72\2\0\7\72\3\0"+
    "\1\72\4\0\6\72\1\0\1\72\1\0\10\72\6\0"+
    "\12\72\2\0\2\72\15\0\72\72\5\0\17\72\1\0"+
    "\12\72\47\0\2\72\1\0\1\72\1\0\5\72\1\0"+
    "\30\72\1\0\1\72\1\0\27\72\2\0\5\72\1\0"+
    "\1\72\1\0\6\72\2\0\12\72\2\0\4\72\40\0"+
    "\1\72\27\0\2\72\6\0\12\72\13\0\1\72\1\0"+
    "\1\72\1\0\1\72\4\0\12\72\1\0\44\72\4\0"+
    "\24\72\1\0\22\72\1\0\44\72\11\0\1\72\71\0"+
    "\112\72\6\0\116\72\2\0\46\72\1\0\1\72\5\0"+
    "\1\72\2\0\53\72\1\0\115\72\1\0\4\72\2\0"+
    "\7\72\1\0\1\72\1\0\4\72\2\0\51\72\1\0"+
    "\4\72\2\0\41\72\1\0\4\72\2\0\7\72\1\0"+
    "\1\72\1\0\4\72\2\0\17\72\1\0\71\72\1\0"+
    "\4\72\2\0\103\72\2\0\3\72\40\0\20\72\20\0"+
    "\126\72\2\0\6\72\3\0\u016c\72\2\0\21\72\1\0"+
    "\32\72\5\0\113\72\3\0\13\72\7\0\15\72\1\0"+
    "\7\72\13\0\25\72\13\0\24\72\14\0\15\72\1\0"+
    "\3\72\1\0\2\72\14\0\124\72\3\0\1\72\4\0"+
    "\2\72\2\0\12\72\41\0\3\72\2\0\12\72\6\0"+
    "\131\72\7\0\53\72\5\0\106\72\12\0\37\72\1\0"+
    "\14\72\4\0\14\72\12\0\50\72\2\0\5\72\13\0"+
    "\54\72\4\0\32\72\6\0\12\72\46\0\34\72\4\0"+
    "\77\72\1\0\35\72\2\0\13\72\6\0\12\72\15\0"+
    "\1\72\10\0\17\72\101\0\114\72\4\0\12\72\21\0"+
    "\11\72\14\0\164\72\14\0\70\72\10\0\12\72\3\0"+
    "\61\72\2\0\11\72\7\0\53\72\2\0\3\72\20\0"+
    "\3\72\1\0\47\72\5\0\372\72\1\0\33\72\2\0"+
    "\6\72\2\0\46\72\2\0\6\72\2\0\10\72\1\0"+
    "\1\72\1\0\1\72\1\0\1\72\1\0\37\72\2\0"+
    "\65\72\1\0\7\72\1\0\1\72\3\0\3\72\1\0"+
    "\7\72\3\0\4\72\2\0\6\72\4\0\15\72\5\0"+
    "\3\72\1\0\7\72\102\0\2\72\23\0\1\72\34\0"+
    "\1\72\15\0\1\72\20\0\15\72\63\0\41\72\21\0"+
    "\1\72\4\0\1\72\2\0\12\72\1\0\1\72\3\0"+
    "\5\72\6\0\1\72\1\0\1\72\1\0\1\72\1\0"+
    "\4\72\1\0\13\72\2\0\4\72\5\0\5\72\4\0"+
    "\1\72\21\0\51\72\u022d\0\64\72\26\0\57\72\1\0"+
    "\57\72\1\0\205\72\6\0\11\72\14\0\46\72\1\0"+
    "\1\72\5\0\1\72\2\0\70\72\7\0\1\72\17\0"+
    "\30\72\11\0\7\72\1\0\7\72\1\0\7\72\1\0"+
    "\7\72\1\0\7\72\1\0\7\72\1\0\7\72\1\0"+
    "\7\72\1\0\40\72\57\0\1\72\325\0\3\72\31\0"+
    "\17\72\1\0\5\72\2\0\5\72\4\0\126\72\2\0"+
    "\2\72\2\0\3\72\1\0\132\72\1\0\4\72\5\0"+
    "\53\72\1\0\136\72\21\0\33\72\65\0\306\72\112\0"+
    "\360\72\20\0\215\72\103\0\56\72\2\0\15\72\3\0"+
    "\34\72\24\0\63\72\1\0\12\72\1\0\163\72\45\0"+
    "\11\72\2\0\147\72\2\0\65\72\2\0\5\72\60\0"+
    "\61\72\30\0\64\72\14\0\106\72\12\0\12\72\6\0"+
    "\30\72\3\0\1\72\1\0\61\72\2\0\44\72\14\0"+
    "\35\72\3\0\101\72\16\0\13\72\6\0\37\72\1\0"+
    "\67\72\11\0\16\72\2\0\12\72\6\0\27\72\3\0"+
    "\111\72\30\0\3\72\2\0\20\72\2\0\5\72\12\0"+
    "\6\72\2\0\6\72\2\0\6\72\11\0\7\72\1\0"+
    "\7\72\1\0\53\72\1\0\14\72\10\0\173\72\1\0"+
    "\2\72\2\0\12\72\6\0\244\72\14\0\27\72\4\0"+
    "\61\72\4\0\156\72\2\0\152\72\46\0\7\72\14\0"+
    "\5\72\5\0\14\72\1\0\15\72\1\0\5\72\1\0"+
    "\1\72\1\0\2\72\1\0\2\72\1\0\154\72\41\0"+
    "\153\72\22\0\100\72\2\0\66\72\50\0\14\72\4\0"+
    "\20\72\20\0\20\72\3\0\2\72\30\0\3\72\40\0"+
    "\5\72\1\0\207\72\23\0\12\72\7\0\32\72\4\0"+
    "\1\72\1\0\32\72\13\0\131\72\3\0\6\72\2\0"+
    "\6\72\2\0\6\72\2\0\3\72\43\0\14\72\1\0"+
    "\32\72\1\0\23\72\1\0\2\72\1\0\17\72\2\0"+
    "\16\72\42\0\173\72\105\0\65\72\210\0\1\72\202\0"+
    "\35\72\3\0\61\72\17\0\1\72\37\0\40\72\15\0"+
    "\36\72\5\0\53\72\5\0\36\72\2\0\44\72\4\0"+
    "\10\72\1\0\5\72\52\0\236\72\2\0\12\72\6\0"+
    "\44\72\4\0\44\72\4\0\50\72\10\0\64\72\234\0"+
    "\67\72\11\0\26\72\12\0\10\72\230\0\6\72\2\0"+
    "\1\72\1\0\54\72\1\0\2\72\3\0\1\72\2\0"+
    "\27\72\12\0\27\72\11\0\37\72\101\0\23\72\1\0"+
    "\2\72\12\0\26\72\12\0\32\72\106\0\70\72\6\0"+
    "\2\72\100\0\4\72\1\0\2\72\5\0\10\72\1\0"+
    "\3\72\1\0\35\72\2\0\3\72\4\0\1\72\40\0"+
    "\35\72\3\0\35\72\43\0\10\72\1\0\36\72\31\0"+
    "\66\72\12\0\26\72\12\0\23\72\15\0\22\72\156\0"+
    "\111\72\67\0\63\72\15\0\63\72\15\0\50\72\10\0"+
    "\12\72\306\0\35\72\12\0\1\72\10\0\41\72\217\0"+
    "\27\72\11\0\107\72\37\0\12\72\17\0\74\72\25\0"+
    "\31\72\7\0\12\72\6\0\65\72\1\0\12\72\4\0"+
    "\3\72\11\0\44\72\2\0\1\72\11\0\105\72\4\0"+
    "\4\72\3\0\13\72\1\0\1\72\43\0\22\72\1\0"+
    "\45\72\6\0\1\72\101\0\7\72\1\0\1\72\1\0"+
    "\4\72\1\0\17\72\1\0\12\72\7\0\73\72\5\0"+
    "\12\72\6\0\4\72\1\0\10\72\2\0\2\72\2\0"+
    "\26\72\1\0\7\72\1\0\2\72\1\0\5\72\1\0"+
    "\12\72\2\0\2\72\2\0\3\72\2\0\1\72\6\0"+
    "\1\72\5\0\7\72\2\0\7\72\3\0\5\72\213\0"+
    "\113\72\5\0\12\72\4\0\2\72\40\0\106\72\1\0"+
    "\1\72\10\0\12\72\246\0\66\72\2\0\11\72\27\0"+
    "\6\72\42\0\101\72\3\0\1\72\13\0\12\72\46\0"+
    "\71\72\7\0\12\72\66\0\33\72\2\0\17\72\4\0"+
    "\12\72\306\0\73\72\145\0\112\72\25\0\1\72\240\0"+
    "\10\72\2\0\56\72\2\0\10\72\1\0\2\72\33\0"+
    "\77\72\10\0\1\72\10\0\112\72\3\0\1\72\42\0"+
    "\71\72\7\0\11\72\1\0\55\72\1\0\11\72\17\0"+
    "\12\72\30\0\36\72\2\0\26\72\1\0\16\72\111\0"+
    "\7\72\1\0\2\72\1\0\54\72\3\0\1\72\1\0"+
    "\2\72\1\0\11\72\10\0\12\72\6\0\6\72\1\0"+
    "\2\72\1\0\45\72\1\0\2\72\1\0\6\72\7\0"+
    "\12\72\u0136\0\27\72\11\0\232\72\146\0\157\72\21\0"+
    "\304\72\274\0\57\72\321\0\107\72\271\0\71\72\7\0"+
    "\37\72\1\0\12\72\146\0\36\72\2\0\5\72\13\0"+
    "\67\72\11\0\4\72\14\0\12\72\11\0\25\72\5\0"+
    "\23\72\260\0\100\72\200\0\113\72\4\0\71\72\7\0"+
    "\21\72\100\0\2\72\1\0\1\72\34\0\370\72\10\0"+
    "\363\72\15\0\37\72\61\0\3\72\21\0\4\72\10\0"+
    "\u018c\72\4\0\153\72\5\0\15\72\3\0\11\72\7\0"+
    "\12\72\3\0\2\72\306\0\5\72\3\0\6\72\10\0"+
    "\10\72\2\0\7\72\36\0\4\72\224\0\3\72\273\0"+
    "\125\72\1\0\107\72\1\0\2\72\2\0\1\72\2\0"+
    "\2\72\2\0\4\72\1\0\14\72\1\0\1\72\1\0"+
    "\7\72\1\0\101\72\1\0\4\72\2\0\10\72\1\0"+
    "\7\72\1\0\34\72\1\0\4\72\1\0\5\72\1\0"+
    "\1\72\3\0\7\72\1\0\u0154\72\2\0\31\72\1\0"+
    "\31\72\1\0\37\72\1\0\31\72\1\0\37\72\1\0"+
    "\31\72\1\0\37\72\1\0\31\72\1\0\37\72\1\0"+
    "\31\72\1\0\10\72\2\0\151\72\4\0\62\72\10\0"+
    "\1\72\16\0\1\72\26\0\5\72\1\0\17\72\120\0"+
    "\7\72\1\0\21\72\2\0\7\72\1\0\2\72\1\0"+
    "\5\72\325\0\55\72\3\0\16\72\2\0\12\72\4\0"+
    "\1\72\u0171\0\72\72\6\0\305\72\13\0\7\72\51\0"+
    "\114\72\4\0\12\72\246\0\4\72\1\0\33\72\1\0"+
    "\2\72\1\0\1\72\2\0\1\72\1\0\12\72\1\0"+
    "\4\72\1\0\1\72\1\0\1\72\6\0\1\72\4\0"+
    "\1\72\1\0\1\72\1\0\1\72\1\0\3\72\1\0"+
    "\2\72\1\0\1\72\2\0\1\72\1\0\1\72\1\0"+
    "\1\72\1\0\1\72\1\0\1\72\1\0\2\72\1\0"+
    "\1\72\2\0\4\72\1\0\7\72\1\0\4\72\1\0"+
    "\4\72\1\0\1\72\1\0\12\72\1\0\21\72\5\0"+
    "\3\72\1\0\5\72\1\0\21\72\164\0\32\72\6\0"+
    "\32\72\6\0\32\72\166\0\327\72\51\0\65\72\13\0"+
    "\336\72\2\0\u0182\72\16\0\u0131\72\37\0\36\72\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\2\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\20\24\1\32\1\24\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\4\0\1\41\1\42"+
    "\1\43\11\24\1\44\1\45\2\24\1\46\13\24\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\0\1\55\1\0"+
    "\11\24\1\56\1\57\1\60\3\24\1\61\2\24\1\62"+
    "\1\63\2\24\1\64\3\24\2\0\1\24\1\65\1\24"+
    "\1\66\1\67\1\70\1\71\1\72\1\24\1\73\2\24"+
    "\1\74\1\24\1\75\1\24\1\76\1\77\1\24\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\2\24\1\106\1\107"+
    "\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\261\0\354\0\u0127\0\261"+
    "\0\u0162\0\u019d\0\u01d8\0\261\0\261\0\261\0\261\0\261"+
    "\0\261\0\261\0\u0213\0\u024e\0\u0289\0\u02c4\0\261\0\u02ff"+
    "\0\261\0\u033a\0\261\0\u0375\0\u0375\0\u0375\0\261\0\261"+
    "\0\261\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\261\0\u0760\0\261\0\u079b\0\261\0\u07d6\0\261"+
    "\0\261\0\u0811\0\u084c\0\u0887\0\u08c2\0\261\0\261\0\261"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a"+
    "\0\u0ad5\0\u0375\0\u0b10\0\u0b4b\0\u0b86\0\u0375\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0375\0\261\0\261\0\261\0\261\0\261\0\u0e4a"+
    "\0\u0887\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\u0375\0\u0375\0\u0375\0\u10d3\0\u110e"+
    "\0\u1149\0\u0375\0\u1184\0\u11bf\0\u0375\0\u0375\0\u11fa\0\u1235"+
    "\0\u0375\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u0375"+
    "\0\u13d2\0\u0375\0\u0375\0\u0375\0\u0375\0\u0375\0\u140d\0\u0375"+
    "\0\u1448\0\u1483\0\u0375\0\u14be\0\u0375\0\u14f9\0\u0375\0\u0375"+
    "\0\u1534\0\u156f\0\u0375\0\u0375\0\u0375\0\u0375\0\u0375\0\u15aa"+
    "\0\u15e5\0\u0375\0\u0375\0\u0375";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\4\1\40\1\41\1\4"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\2\34\1\50"+
    "\1\34\1\51\1\52\1\34\1\53\1\54\1\34\1\55"+
    "\1\56\1\57\1\34\1\60\1\61\1\62\1\63\1\64"+
    "\74\4\2\65\2\4\1\65\1\66\27\65\1\67\35\65"+
    "\75\0\1\5\116\0\1\70\44\0\2\11\2\0\67\11"+
    "\7\0\1\71\104\0\2\72\6\0\3\72\4\0\27\72"+
    "\3\0\1\72\6\0\1\73\103\0\1\74\20\0\1\75"+
    "\51\0\1\74\1\0\2\25\15\0\1\75\60\0\1\76"+
    "\72\0\1\77\72\0\1\100\65\0\2\34\6\0\3\34"+
    "\4\0\27\34\1\0\1\34\23\0\2\34\6\0\3\34"+
    "\4\0\13\34\1\101\13\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\16\34\1\102\2\34\1\103\5\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\10\34"+
    "\1\104\16\34\1\0\1\34\23\0\2\34\6\0\3\34"+
    "\4\0\11\34\1\105\15\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\13\34\1\106\13\34\1\0\1\34"+
    "\23\0\2\34\6\0\3\34\4\0\4\34\1\107\6\34"+
    "\1\110\2\34\1\111\10\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\6\34\1\112\6\34\1\113\11\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\5\34"+
    "\1\114\21\34\1\0\1\34\23\0\2\34\6\0\3\34"+
    "\4\0\1\34\1\115\25\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\6\34\1\116\20\34\1\0\1\34"+
    "\23\0\2\34\6\0\3\34\4\0\21\34\1\117\5\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\1\34"+
    "\1\120\3\34\1\121\21\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\5\34\1\122\15\34\1\123\3\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\4\34"+
    "\1\124\3\34\1\125\5\34\1\126\10\34\1\0\1\34"+
    "\23\0\2\34\6\0\3\34\4\0\16\34\1\127\10\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\1\34"+
    "\1\130\6\34\1\131\16\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\27\34\1\0\1\132\2\0\2\65"+
    "\2\0\1\65\1\0\27\65\1\0\35\65\5\0\1\133"+
    "\47\0\1\134\3\0\1\135\1\0\1\136\17\0\1\137"+
    "\62\0\6\73\1\140\11\73\1\0\52\73\21\0\2\141"+
    "\72\0\1\142\71\0\2\34\6\0\3\34\4\0\11\34"+
    "\1\143\15\34\1\0\1\34\23\0\2\34\6\0\3\34"+
    "\4\0\16\34\1\144\10\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\5\34\1\145\21\34\1\0\1\34"+
    "\23\0\2\34\6\0\3\34\4\0\1\34\1\146\25\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\3\34"+
    "\1\147\23\34\1\0\1\34\23\0\2\34\6\0\3\34"+
    "\4\0\11\34\1\150\10\34\1\151\4\34\1\0\1\34"+
    "\23\0\2\34\6\0\3\34\4\0\5\34\1\152\21\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\16\34"+
    "\1\153\10\34\1\0\1\34\23\0\2\34\6\0\3\34"+
    "\4\0\21\34\1\154\5\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\23\34\1\155\3\34\1\0\1\34"+
    "\23\0\2\34\6\0\3\34\4\0\15\34\1\156\11\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\11\34"+
    "\1\157\15\34\1\0\1\34\23\0\2\34\6\0\3\34"+
    "\4\0\11\34\1\160\15\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\15\34\1\161\5\34\1\162\3\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\1\34"+
    "\1\163\21\34\1\164\3\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\20\34\1\165\6\34\1\0\1\34"+
    "\23\0\2\34\6\0\3\34\4\0\21\34\1\166\5\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\5\34"+
    "\1\167\21\34\1\0\1\34\23\0\2\34\6\0\3\34"+
    "\4\0\21\34\1\170\5\34\1\0\1\34\23\0\2\34"+
    "\6\0\3\34\4\0\17\34\1\171\7\34\1\0\1\34"+
    "\23\0\2\34\6\0\3\34\4\0\11\34\1\172\15\34"+
    "\1\0\1\34\23\0\2\34\6\0\3\34\4\0\11\34"+
    "\1\173\15\34\1\0\1\34\23\0\2\34\6\0\3\34"+
    "\4\0\11\34\1\174\15\34\1\0\1\34\22\0\1\5"+
    "\53\0\3\175\14\0\1\176\2\142\71\0\2\34\6\0"+
    "\3\34\4\0\1\34\1\177\25\34\1\0\1\34\23\0"+
    "\2\34\6\0\3\34\4\0\13\34\1\200\13\34\1\0"+
    "\1\34\23\0\2\34\6\0\3\34\4\0\1\34\1\201"+
    "\25\34\1\0\1\34\23\0\2\34\6\0\3\34\4\0"+
    "\21\34\1\202\5\34\1\0\1\34\23\0\2\34\6\0"+
    "\3\34\4\0\23\34\1\203\3\34\1\0\1\34\23\0"+
    "\2\34\6\0\3\34\4\0\6\34\1\204\20\34\1\0"+
    "\1\34\23\0\2\34\6\0\3\34\4\0\5\34\1\205"+
    "\21\34\1\0\1\34\23\0\2\34\6\0\3\34\4\0"+
    "\6\34\1\206\20\34\1\0\1\34\23\0\2\34\6\0"+
    "\3\34\4\0\1\34\1\207\25\34\1\0\1\34\23\0"+
    "\2\34\6\0\3\34\4\0\15\34\1\210\11\34\1\0"+
    "\1\34\23\0\2\34\6\0\3\34\4\0\15\34\1\211"+
    "\11\34\1\0\1\34\23\0\2\34\6\0\3\34\4\0"+
    "\7\34\1\212\17\34\1\0\1\34\23\0\2\34\6\0"+
    "\3\34\4\0\4\34\1\213\22\34\1\0\1\34\23\0"+
    "\2\34\6\0\3\34\4\0\24\34\1\214\2\34\1\0"+
    "\1\34\23\0\2\34\6\0\3\34\4\0\6\34\1\215"+
    "\20\34\1\0\1\34\23\0\2\34\6\0\3\34\4\0"+
    "\5\34\1\216\21\34\1\0\1\34\23\0\2\34\6\0"+
    "\3\34\4\0\4\34\1\217\22\34\1\0\1\34\23\0"+
    "\2\34\6\0\3\34\4\0\23\34\1\220\3\34\1\0"+
    "\1\34\23\0\2\34\6\0\3\34\4\0\13\34\1\221"+
    "\13\34\1\0\1\34\3\0\3\175\14\0\1\176\53\0"+
    "\3\176\16\0\1\222\71\0\2\34\6\0\3\34\4\0"+
    "\22\34\1\223\4\34\1\0\1\34\23\0\2\34\6\0"+
    "\3\34\4\0\12\34\1\224\14\34\1\0\1\34\23\0"+
    "\2\34\6\0\3\34\4\0\23\34\1\225\3\34\1\0"+
    "\1\34\23\0\2\34\6\0\3\34\4\0\23\34\1\226"+
    "\3\34\1\0\1\34\23\0\2\34\6\0\3\34\4\0"+
    "\5\34\1\227\21\34\1\0\1\34\23\0\2\34\6\0"+
    "\3\34\4\0\21\34\1\230\5\34\1\0\1\34\23\0"+
    "\2\34\6\0\3\34\4\0\1\34\1\231\25\34\1\0"+
    "\1\34\23\0\2\34\6\0\3\34\4\0\5\34\1\232"+
    "\21\34\1\0\1\34\23\0\2\222\71\0\2\34\6\0"+
    "\3\34\4\0\15\34\1\233\11\34\1\0\1\34\23\0"+
    "\2\34\6\0\3\34\4\0\4\34\1\234\22\34\1\0"+
    "\1\34\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\3\1\7\11\4\1\1\11"+
    "\1\1\1\11\1\1\1\11\3\1\3\11\20\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\4\0\3\11"+
    "\32\1\5\11\1\0\1\1\1\0\32\1\2\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();
  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error in line "
        + (yyline+1) +": Invalid input '" + yytext()+"'");
    return symbol(sym.ILLEGAL_CHARACTER);
            }
            // fall through
          case 73: break;
          case 2:
            { 
            }
            // fall through
          case 74: break;
          case 3:
            { return symbol(sym.NOT);
            }
            // fall through
          case 75: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 76: break;
          case 5:
            { return symbol(sym.LPAREN);
            }
            // fall through
          case 77: break;
          case 6:
            { return symbol(sym.RPAREN);
            }
            // fall through
          case 78: break;
          case 7:
            { return symbol(sym.MUL);
            }
            // fall through
          case 79: break;
          case 8:
            { return symbol(sym.ADD);
            }
            // fall through
          case 80: break;
          case 9:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 81: break;
          case 10:
            { return symbol(sym.SUB);
            }
            // fall through
          case 82: break;
          case 11:
            { return symbol(sym.DOT);
            }
            // fall through
          case 83: break;
          case 12:
            { return symbol(sym.DIV);
            }
            // fall through
          case 84: break;
          case 13:
            { return symbol(sym.INTEGER);
            }
            // fall through
          case 85: break;
          case 14:
            { return symbol(sym.COLON);
            }
            // fall through
          case 86: break;
          case 15:
            { return symbol(sym.SEMI);
            }
            // fall through
          case 87: break;
          case 16:
            { return symbol(sym.LT);
            }
            // fall through
          case 88: break;
          case 17:
            { return symbol(sym.EQ);
            }
            // fall through
          case 89: break;
          case 18:
            { return symbol(sym.GT);
            }
            // fall through
          case 90: break;
          case 19:
            { return symbol(sym.CONTAINS);
            }
            // fall through
          case 91: break;
          case 20:
            { return symbol(sym.IDENTIFIER, yytext());
            }
            // fall through
          case 92: break;
          case 21:
            { return symbol(sym.FALSE);
            }
            // fall through
          case 93: break;
          case 22:
            { return symbol(sym.TRUE);
            }
            // fall through
          case 94: break;
          case 23:
            { return symbol(sym.LSQBKT);
            }
            // fall through
          case 95: break;
          case 24:
            { return symbol(sym.RSQBKT);
            }
            // fall through
          case 96: break;
          case 25:
            { return symbol(sym.POW);
            }
            // fall through
          case 97: break;
          case 26:
            { return symbol(sym.LCURL);
            }
            // fall through
          case 98: break;
          case 27:
            { return symbol(sym.RCURL);
            }
            // fall through
          case 99: break;
          case 28:
            { string.append( yytext() );
            }
            // fall through
          case 100: break;
          case 29:
            { yybegin(YYINITIAL);
                                       return symbol(sym.STRING,
                                       string.toString());
            }
            // fall through
          case 101: break;
          case 30:
            { string.append('\\');
            }
            // fall through
          case 102: break;
          case 31:
            { return symbol(sym.NOTEQ);
            }
            // fall through
          case 103: break;
          case 32:
            { return symbol(sym.AND);
            }
            // fall through
          case 104: break;
          case 33:
            { return symbol(sym.ASSIGN);
            }
            // fall through
          case 105: break;
          case 34:
            { return symbol(sym.LE);
            }
            // fall through
          case 106: break;
          case 35:
            { return symbol(sym.GE);
            }
            // fall through
          case 107: break;
          case 36:
            { return symbol(sym.IF);
            }
            // fall through
          case 108: break;
          case 37:
            { return symbol(sym.IN);
            }
            // fall through
          case 109: break;
          case 38:
            { return symbol(sym.OF);
            }
            // fall through
          case 110: break;
          case 39:
            { return symbol(sym.OR);
            }
            // fall through
          case 111: break;
          case 40:
            { string.append('\"');
            }
            // fall through
          case 112: break;
          case 41:
            { string.append('\n');
            }
            // fall through
          case 113: break;
          case 42:
            { string.append('\r');
            }
            // fall through
          case 114: break;
          case 43:
            { string.append('\t');
            }
            // fall through
          case 115: break;
          case 44:
            { return symbol(sym.CHAR);
            }
            // fall through
          case 116: break;
          case 45:
            { return symbol(sym.FLOAT);
            }
            // fall through
          case 117: break;
          case 46:
            { return symbol(sym.FOR);
            }
            // fall through
          case 118: break;
          case 47:
            { return symbol(sym.TINT);
            }
            // fall through
          case 119: break;
          case 48:
            { return symbol(sym.LEN);
            }
            // fall through
          case 120: break;
          case 49:
            { return symbol(sym.TRATIONAL);
            }
            // fall through
          case 121: break;
          case 50:
            { return symbol(sym.SEQ);
            }
            // fall through
          case 122: break;
          case 51:
            { return symbol(sym.TSTR);
            }
            // fall through
          case 123: break;
          case 52:
            { return symbol(sym.TOP);
            }
            // fall through
          case 124: break;
          case 53:
            { return symbol(sym.TBOOL);
            }
            // fall through
          case 125: break;
          case 54:
            { return symbol(sym.TCHAR);
            }
            // fall through
          case 126: break;
          case 55:
            { return symbol(sym.DICT);
            }
            // fall through
          case 127: break;
          case 56:
            { return symbol(sym.ELIF);
            }
            // fall through
          case 128: break;
          case 57:
            { return symbol(sym.ELSE);
            }
            // fall through
          case 129: break;
          case 58:
            { return symbol(sym.FDEF);
            }
            // fall through
          case 130: break;
          case 59:
            { return symbol(sym.MAIN);
            }
            // fall through
          case 131: break;
          case 60:
            { return symbol(sym.READ);
            }
            // fall through
          case 132: break;
          case 61:
            { return symbol(sym.TDEF);
            }
            // fall through
          case 133: break;
          case 62:
            { return symbol(sym.VOID);
            }
            // fall through
          case 134: break;
          case 63:
            { return symbol(sym.WAIT);
            }
            // fall through
          case 135: break;
          case 64:
            { return symbol(sym.RATIONAL);
            }
            // fall through
          case 136: break;
          case 65:
            { return symbol(sym.ALIAS);
            }
            // fall through
          case 137: break;
          case 66:
            { return symbol(sym.BREAK);
            }
            // fall through
          case 138: break;
          case 67:
            { return symbol(sym.TFLOAT);
            }
            // fall through
          case 139: break;
          case 68:
            { return symbol(sym.PRINT);
            }
            // fall through
          case 140: break;
          case 69:
            { return symbol(sym.RANGE);
            }
            // fall through
          case 141: break;
          case 70:
            { return symbol(sym.WHILE);
            }
            // fall through
          case 142: break;
          case 71:
            { return symbol(sym.RETURN);
            }
            // fall through
          case 143: break;
          case 72:
            { return symbol(sym.THREAD);
            }
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
