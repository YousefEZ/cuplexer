import java_cup.runtime.*;

scan with {: return lexer.next_token(); :};

parser code {:

  static class ErrorInfo {
    public int line;
    public int column;

    public ErrorInfo(int line, int column) {
      this.line = line;
      this.column = column;
    }
  }

  Lexer lexer;

  // used by SC.java to decide whether parsing is successful
  public boolean syntaxErrors;

  public Parser(Lexer lex) {
      super(lex);
      lexer = lex;
  }

  public void syntax_error(Symbol cur_token) {
    this.syntaxErrors = true;
  }

  public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    this.syntaxErrors = true;
    report_fatal_error(
      "Syntax error at line " + (cur_token.left+1) + ", column "
      + cur_token.right + ".\n", null
    );
  }

  public void custom_err_report(String message, int line, int column)
    throws java.lang.Exception
  {
    this.syntaxErrors = true;
    report_fatal_error( message + "\n", new ErrorInfo(line, column) );
  }

:};

/* Your code goes here */
/* Your code goes here */
/* Your code goes here */

terminal CHAR, FLOAT, RATIONAL, STRING;
terminal Integer INTEGER;
terminal TINT, TFLOAT, TRATIONAL, TCHAR, TSTR, TBOOL, IDENTIFIER, VOID;
terminal BREAK, TOP, DICT, SEQ, RANGE, THREAD, PRINT, READ, RETURN, LEN, WAIT;
terminal TRUE, FALSE;
terminal FDEF, TDEF, ALIAS, MAIN, DOT;
terminal FOR, OF, WHILE, IN, IF, ELIF, ELSE;
terminal ASSIGN;
terminal ADD, SUB, MUL, DIV, POW;
terminal NOT, AND, OR;
terminal EQ, NOTEQ, LT, LE, GT, GE, CONTAINS;
terminal LPAREN, LSQBKT, LCURL;
terminal RPAREN, RSQBKT, RCURL;
terminal COLON, SEMI, COMMA;
terminal ILLEGAL_CHARACTER;

nonterminal continue;
nonterminal seq_declaration, seq, declaration, comma_seq, print_statement;
nonterminal while_statement, if_statement, if_continuation, boolean_chain, condition;
nonterminal function_definition, function_type, function,return_statement, parameter_list, function_call;
nonterminal types, expression, factor, data;
nonterminal break_statement, identifier_call, variable, assigment_statement;
nonterminal type_statement;
nonterminal dict, dict_declaration, dict_seq, dict_list, list_gen, range;
nonterminal thread_statement, while_continue, if_while_statement, if_while_continuation;
nonterminal alias_statement, defined_types, statements, regular_statements;
nonterminal main_special_statements, main_continue, function_special_statements, function_continue;
nonterminal reference, main_function, key_pair, expression_clean, non_empty_seq, non_empty_param, paran_var, attribute;
nonterminal non_empty_vars, non_empty_identifiers;

precedence left ADD, SUB, OR;
precedence left MAIN, IDENTIFIER;
precedence left MUL, DIV, AND;
precedence right POW;

regular_statements ::= statements continue
                   |   main_function
                   ;

statements ::= print_statement
         |   if_statement
         |   declaration
         |   return_statement
         |   function_definition
         |   while_statement
         |   break_statement
         |   assigment_statement
         |   type_statement
         |   READ variable SEMI
         |   thread_statement
         |   function_call SEMI
         |   alias_statement SEMI
         ;

continue ::= regular_statements
         |
         ;

paran_var ::= LPAREN paran_var RPAREN
          |   IDENTIFIER
          ;

alias_statement ::= ALIAS variable variable
                |   ALIAS defined_types variable
                ;


non_empty_vars ::= variable COMMA non_empty_vars
               |   variable
               ;

assigment_statement ::= non_empty_vars ASSIGN non_empty_seq SEMI
                    ;

break_statement ::= BREAK SEMI
                |   BREAK boolean_chain SEMI
                ;

return_statement ::= RETURN boolean_chain SEMI
                 |   RETURN SEMI
                 ;

while_statement ::= WHILE LCURL regular_statements RCURL
                ;

print_statement ::= PRINT non_empty_seq SEMI;

thread_statement ::= THREAD paran_var ASSIGN LCURL regular_statements RCURL SEMI;

if_statement ::= IF LPAREN boolean_chain RPAREN LCURL regular_statements RCURL if_continuation
             ;

if_continuation ::= ELIF LPAREN boolean_chain RPAREN LCURL regular_statements RCURL if_continuation
                |   ELSE LCURL regular_statements RCURL
                |
                ;

boolean_chain ::= NOT boolean_chain
              |   LPAREN boolean_chain RPAREN
              |   boolean_chain OR boolean_chain
              |   boolean_chain AND boolean_chain
              |   condition
              ;

condition ::= expression EQ boolean_chain
          |   expression NOTEQ boolean_chain
          |   expression LT boolean_chain
          |   expression LE boolean_chain
          |   expression IN boolean_chain
          |   expression CONTAINS boolean_chain
          |   expression
          ;

attribute ::= IDENTIFIER DOT attribute
          |   IDENTIFIER
          ;

non_empty_identifiers ::= attribute COMMA non_empty_identifiers
                      |   attribute
                      ;

declaration ::= types attribute SEMI
            |   types attribute ASSIGN non_empty_seq SEMI
            ;

range ::= RANGE LPAREN boolean_chain RPAREN
      |   RANGE LPAREN boolean_chain COMMA boolean_chain RPAREN
      |   RANGE LPAREN boolean_chain COMMA boolean_chain COMMA boolean_chain RPAREN
      ;

list_gen ::= LSQBKT boolean_chain FOR IDENTIFIER OF function_call RSQBKT
         |   LSQBKT boolean_chain FOR IDENTIFIER OF function_call COMMA IF boolean_chain RSQBKT
         ;


non_empty_seq ::=  boolean_chain COMMA comma_seq
              |    boolean_chain
              ;

comma_seq ::=  non_empty_seq
          |
          ;

seq ::= SEQ LT types GT
    |   SEQ LT TOP GT
    ;

dict_seq ::= dict_list
         |
         ;


dict_list ::= expression COLON boolean_chain COMMA dict_list
          |   expression COLON boolean_chain
          ;


dict ::= DICT LT types COMMA types GT
     |   DICT LT types COMMA TOP GT
     |   DICT LT TOP COMMA types GT
     |   DICT LT TOP COMMA TOP GT
     ;

non_empty_param ::= types IDENTIFIER COMMA parameter_list
                |   types IDENTIFIER
                ;

parameter_list ::= non_empty_param
               |
               ;


function ::= IDENTIFIER LPAREN parameter_list RPAREN LCURL regular_statements RCURL SEMI;

main_function ::= FDEF MAIN LPAREN RPAREN LCURL regular_statements RCURL SEMI;

function_definition ::= FDEF types function
                    | FDEF function
                    ;

function_call ::= LEN LPAREN boolean_chain RPAREN
              |   WAIT LPAREN variable RPAREN
              |   range
              |   IDENTIFIER LPAREN comma_seq RPAREN
              ;

type_statement ::= TDEF IDENTIFIER LCURL non_empty_param RCURL SEMI;

expression ::=  expression ADD expression_clean
           |   expression SUB expression_clean
           |   factor
           ;

factor ::= factor DIV expression_clean
       |   factor MUL expression_clean
       |   data
       ;


expression_clean ::= LPAREN expression_clean RPAREN
                 |   expression
                 ;

reference ::= LSQBKT boolean_chain RSQBKT reference
          |   LSQBKT boolean_chain COLON boolean_chain RSQBKT reference
          |   LSQBKT COLON boolean_chain RSQBKT reference
          |   LSQBKT boolean_chain COLON RSQBKT reference
          |
          ;

identifier_call ::= IDENTIFIER reference
                ;

variable ::= identifier_call DOT variable
         |   identifier_call
         ;

data ::= data POW expression_clean
      |   RATIONAL
      |   SUB data
      |   variable
      |   INTEGER
      |   FLOAT
      |   STRING
      |   CHAR
      |   TRUE
      |   FALSE
      |   LSQBKT comma_seq RSQBKT
      |   LPAREN dict_seq RPAREN
      |   list_gen
      |   function_call
      ;


types ::= TINT
      |   TFLOAT
      |   TRATIONAL
      |   TCHAR
      |   TSTR
      |   TBOOL
      |   seq
      |   dict
      |   IDENTIFIER
      ;

defined_types ::= TINT
             |   TFLOAT
             |   TRATIONAL
             |   TCHAR
             |   TSTR
             |   TBOOL
             |   VOID
             |   seq
             |   dict
             ;
